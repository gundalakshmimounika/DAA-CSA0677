def findGoodStrings(n, s1, s2, evil):
    MOD = 10**9 + 7
    def kmp(s):
        prefix = [0] * len(s)
        j = 0
        for i in range(1, len(s)):
            while j > 0 and s[i] != s[j]:
                j = prefix[j - 1]
            if s[i] == s[j]:
                j += 1
            prefix[i] = j
        return prefix
    def dfs(pos, pre1, pre2, pre3):
        if pos == n:
            return 1
        if (pos, pre1, pre2, pre3) in memo:
            return memo[(pos, pre1, pre2, pre3)]
        res = 0
        for c in range(ord(s1[pos]) if pre1 else ord('a'), ord(s2[pos]) + 1 if pre2 else ord('z') + 1):
            nxt1 = pre1 and c == ord(s1[pos])
            nxt2 = pre2 and c == ord(s2[pos])
            nxt3 = pre3
            while nxt3 and evil[nxt3] != chr(c):
                nxt3 = fail[nxt3 - 1]
            if evil[nxt3] == chr(c):
                nxt3 += 1
            if nxt3 < len(evil):
                res += dfs(pos + 1, nxt1, nxt2, nxt3)
                res %= MOD
        memo[(pos, pre1, pre2, pre3)] = res
        return res
    fail = kmp(evil)
    memo = {}
    return dfs(0, True, True, 0)

# Example Usage
n = 2
s1 = "aa"
s2 = "da"
evil = "b"
print(findGoodStrings(n, s1, s2, evil))  # Output: 2
