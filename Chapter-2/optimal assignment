import itertools

def total_cost(assignment, cost_matrix):
    """ Calculate the total cost of an assignment based on the cost matrix """
    total_cost = 0
    for worker, task in enumerate(assignment):
        total_cost += cost_matrix[worker][task]
    return total_cost

def assignment_problem(cost_matrix):
    """ Solve the assignment problem using exhaustive search """
    n = len(cost_matrix)
    if n == 0:
        return [], 0
    
    # Generate all permutations of worker indices
    worker_indices = list(range(n))
    all_permutations = itertools.permutations(worker_indices)
    
    # Initialize variables to track optimal assignment and minimum cost
    optimal_assignment = None
    min_cost = float('inf')
    
    # Iterate through each permutation
    for perm in all_permutations:
        current_assignment = list(perm)
        current_cost = total_cost(current_assignment, cost_matrix)
        
        # Update optimal assignment if current cost is lower
        if current_cost < min_cost:
            min_cost = current_cost
            optimal_assignment = [(worker + 1, task + 1) for worker, task in enumerate(current_assignment)]
    
    return optimal_assignment, min_cost

# Test cases
cost_matrix1 = [
    [3, 10, 7],
    [8, 5, 12],
    [4, 6, 9]
]

cost_matrix2 = [
    [15, 9, 4],
    [8, 7, 18],
    [6, 12, 11]
]

# Solve Test Case 1
optimal_assignment_1, total_cost_1 = assignment_problem(cost_matrix1)
print("Test Case 1:")
print(f"Optimal Assignment: {optimal_assignment_1}")
print(f"Total Cost: {total_cost_1}")

# Solve Test Case 2
optimal_assignment_2, total_cost_2 = assignment_problem(cost_matrix2)
print("\nTest Case 2:")
print(f"Optimal Assignment: {optimal_assignment_2}")
print(f"Total Cost: {total_cost_2}")
