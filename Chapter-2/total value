import itertools

def total_value(items, values):
    """ Calculate the total value of selected items """
    total = 0
    for item in items:
        total += values[item]
    return total

def is_feasible(items, weights, capacity):
    """ Check if the total weight of selected items is feasible """
    total_weight = sum(weights[item] for item in items)
    return total_weight <= capacity

def knapsack_problem(items, weights, values, capacity):
    """ Solve the 0-1 Knapsack problem using exhaustive search """
    n = len(items)
    if n == 0:
        return [], 0
    
    max_value = 0
    optimal_selection = []
    
    # Generate all subsets of items
    for r in range(1, n + 1):
        for subset in itertools.combinations(items, r):
            if is_feasible(subset, weights, capacity):
                subset_value = total_value(subset, values)
                if subset_value > max_value:
                    max_value = subset_value
                    optimal_selection = list(subset)
    
    return optimal_selection, max_value

# Test cases
items1 = [0, 1, 2]
weights1 = [2, 3, 1]
values1 = [4, 5, 3]
capacity1 = 4

items2 = [0, 1, 2, 3]
weights2 = [1, 2, 3, 4]
values2 = [2, 4, 6, 3]
capacity2 = 6

# Solve Test Case 1
optimal_selection_1, total_value_1 = knapsack_problem(items1, weights1, values1, capacity1)
print("Test Case 1:")
print(f"Optimal Selection: {optimal_selection_1} (Items with indices {optimal_selection_1})")
print(f"Total Value: {total_value_1}")

# Solve Test Case 2
optimal_selection_2, total_value_2 = knapsack_problem(items2, weights2, values2, capacity2)
print("\nTest Case 2:")
print(f"Optimal Selection:
