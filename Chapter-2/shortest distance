import math
from itertools import permutations

def distance(city1, city2):
    """ Calculate the Euclidean distance between two cities """
    return math.sqrt((city2[0] - city1[0]) ** 2 + (city2[1] - city1[1]) ** 2)

def tsp(cities):
    """ Solve the TSP problem using exhaustive search """
    n = len(cities)
    if n <= 1:
        return None, []
    
    # Generate all permutations of cities (excluding the starting city)
    all_permutations = permutations(cities[1:])
    
    shortest_path = None
    min_distance = float('inf')
    
    # Iterate through each permutation
    for perm in all_permutations:
        # Construct the full path including the starting city and ending at the starting city
        full_path = [cities[0]] + list(perm) + [cities[0]]
        
        # Calculate the total distance of the current path
        total_distance = 0
        for i in range(len(full_path) - 1):
            total_distance += distance(full_path[i], full_path[i + 1])
        
        # Update the shortest distance and path if this path is shorter
        if total_distance < min_distance:
            min_distance = total_distance
            shortest_path = full_path
    
    return min_distance, shortest_path

# Test cases
cities1 = [(1, 2), (4, 5), (7, 1), (3, 6)]
cities2 = [(2, 4), (8, 1), (1, 7), (6, 3), (5, 9)]

# Test Case 1
shortest_distance_1, shortest_path_1 = tsp(cities1)
print("Test Case 1:")
print(f"Shortest Distance: {shortest_distance_1}")
print(f"Shortest Path: {shortest_path_1}")

# Test Case 2
shortest_distance_2, shortest_path_2 = tsp(cities2)
print("\nTest Case 2:")
print(f"Shortest Distance: {shortest_distance_2}")
print(f"Shortest Path:
